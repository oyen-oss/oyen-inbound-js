/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * This file was auto generated by @block65/openapi-codegen
 *
 * WARN: Do not edit directly.
 *
 * Generated on 2024-08-19T05:17:33.445Z
 *
 */
import type { Jsonify } from 'type-fest';

export type Uuid = string;

export enum SkuEnum {
  Email = 'email',
  Sms = 'sms',
  Event = 'event',
  Webhook = 'webhook',
}

export type SkuString = 'email' | 'sms' | 'event' | 'webhook';
export type PaymentDetails = {
  url: string;
};
export type DomainName = string;
export type CreateMessageRequest = {
  key: string;
  rawSize: number;
  sha256: string;
};

export enum PermissionEnum {
  UsersTokensGet = 'users.tokens.get',
  InboxesLocate = 'inboxes.locate',
}

export type PermissionString = 'users.tokens.get' | 'inboxes.locate';
export type Description = string;
export type DisplayName = string;
export type UpdateTokenRequest = {
  label?: DisplayName;
  description?: Description | null;
  permissions?: PermissionString[] | null;
};

export enum PermissionRoleEnum {
  'Role/inboxesReader' = 'role/inboxes-reader',
}

export type PermissionRoleString = 'role/inboxes-reader';
export type NameId = string;
export type Id = string;
export type IsoTimestamp = Jsonify<Date>;
export type Token = {
  createTime: IsoTimestamp;
  updateTime?: IsoTimestamp;
  tokenId: Id;
  label: DisplayName;
  description?: string;
  team: {
    teamId: Id;
    name: NameId;
    displayName: DisplayName;
  };
  permissions?: PermissionString[];
  roles?: PermissionRoleString[];
  principal?: string;
  expireTime?: IsoTimestamp;
};
export type Tokens = Token[];
export type TokenSchema = string;
export type TokenWithJwt = {
  createTime: IsoTimestamp;
  updateTime?: IsoTimestamp;
  tokenId: Id;
  label: DisplayName;
  description?: string;
  team: {
    teamId: Id;
    name: NameId;
    displayName: DisplayName;
  };
  permissions?: PermissionString[];
  roles?: PermissionRoleString[];
  principal?: string;
  expireTime?: IsoTimestamp;
} & {
  jwt: TokenSchema;
};
export type CreateTokenRequest = {
  label: DisplayName;
  description?: Description;
  teamId: Id;
  permissions: PermissionString[];
};

export enum RoleEnum {
  Owner = 'owner',
  Member = 'member',
}

export type RoleString = 'owner' | 'member';
export type RealtimeKey = string;
export type MemberTeam = {
  createTime: IsoTimestamp;
  updateTime?: IsoTimestamp;
  teamId: Id;
  name: NameId;
  displayName?: DisplayName;
  realtimeKey: RealtimeKey;
  role: RoleString;
};
export type MemberTeams = MemberTeam[];
export type WhatsAppKind = 'whatsapp';
export type EmailKind = 'email';
export type SmsKind = 'sms';
export type Message = {
  teamId: Id;
  inboxId: Id;
  messageId: Id;
  kind?: SmsKind | EmailKind | WhatsAppKind | null;
  url: string;
  rawSize: number;
  sha256: string;
  createTime: IsoTimestamp;
};
export type MessagesList = Message[];
export type Timestamps = {
  createTime: IsoTimestamp;
  updateTime?: IsoTimestamp;
};
export type InboxEventSource = Timestamps & {
  teamId: Id;
  eventSourceId: Id;
  channel: Id;
  endpoint: string;
  accessToken: TokenSchema;
};
export type EmailHandle = string;
export type EmailInbox = Timestamps & {
  teamId: Id;
  inboxId: Id;
  kind: 'email';
  handle: EmailHandle;
  domain: string;
  description?: Description;
};
export type EmailInboxList = EmailInbox[];
export type UserId = string;
export type UserIdOrMe = UserId | 'me';
export type Email = string;
export type GetPaymentDetailsRequest = {
  email: Email;
};
export type Int32Bit = number;
export type UseQuotaRequest = {
  quantity: Int32Bit;
};
export type Quota = {
  teamId: Id;
  sku: 'email' | 'sms' | 'event' | 'webhook';
  quantity: Int32Bit;
  used: Int32Bit;
  updateTime?: IsoTimestamp;
};
export type Quotas = Quota[];
export type EventSource = Timestamps & {
  teamId: Id;
  eventSourceId: Id;
  label: DisplayName;
  description?: Description;
  endpoint: string;
};
export type EventSources = EventSource[];
export type UpdateEventSourceRequest = {
  label?: DisplayName;
  description?: Description | null;
  endpoint?: string;
};
export type CreateEventSourceRequest = {
  label: DisplayName;
  description?: Description;
};
export type JwkPublic = {
  kty: 'RSA';
  n: string;
  e: 'AQAB';
  alg: 'RS256';
};
export type Key = {
  teamId: Id;
  keyId: Id;
  label: DisplayName;
  description?: Description;
  publicKey: JwkPublic;
};
export type Keys = Key[];
export type GetKeyRequest = {
  teamId: Id;
  keyId: Id;
};
export type UpdateKeyRequest = {
  label?: DisplayName;
  description?: Description | null;
};
export type CreateKeyRequest = {
  label: DisplayName;
  description?: Description;
  publicKey: JwkPublic;
};
export type PhoneNumber = string;
export type SmsInbox = Timestamps & {
  teamId: Id;
  inboxId: Id;
  kind: SmsKind;
  handle?: PhoneNumber;
  description?: Description;
};
export type Inbox = EmailInbox | SmsInbox;
export type InboxList = Inbox[];
export type UpdateInboxRequest = {
  description?: Description | null;
};
export type Domain = string;
export type CreateEmailInboxRequest = {
  kind: 'email';
  handle: EmailHandle;
  domain: Domain;
  description?: Description;
};
export type AcceptTeamInvitationRequest = {
  token: TokenSchema;
};
export type TeamInvitation = Timestamps & {
  teamId: Id;
  invitationId: Id;
  role: RoleString;
  expireTime: IsoTimestamp;
  lastSendTime?: IsoTimestamp;
  inviteeEmail?: Email;
  invitedByUserId?: UserId;
};
export type TeamInvitations = TeamInvitation[];
export type CreateTeamInvitationRequest = {
  role: RoleString;
  inviteeEmail: Email;
};
export type TeamMember = Timestamps & {
  teamId: Id;
  userId: UserId;
  username?: NameId;
  role: RoleString;
};
export type TeamMembers = TeamMember[];
export type Team = {
  createTime: IsoTimestamp;
  updateTime?: IsoTimestamp;
  teamId: Id;
  name: NameId;
  displayName?: DisplayName;
  realtimeKey: RealtimeKey;
};
export type Teams = Team[];
export type UpdateTeamNameRequest = {
  name?: NameId;
};
export type UpdateTeamRequest = {
  displayName?: DisplayName;
};
export type CreateTeamRequest = {
  displayName: DisplayName;
  name?: NameId;
};
export type GetTeamRequest = {
  teamId: Id;
};
export type UpdateUserSettingsRequest = {
  displayName?: DisplayName;
  username?: NameId;
};
export type UserSettings = Timestamps & {
  userId: UserId;
  displayName?: DisplayName;
  username?: NameId;
  tokens?: {
    oyen: TokenSchema;
  };
};
export type CreateTeamCommandInput = CreateTeamRequest;
export type CreateTeamCommandBody = CreateTeamRequest;
export type ListTeamsCommandInput = never;
export type ListTeamsCommandBody = never;
export type GetTeamCommandParams = {
  teamId: string;
};
export type GetTeamCommandInput = GetTeamCommandParams;
export type GetTeamCommandBody = never;
export type UpdateTeamCommandParams = {
  teamId: string;
};
export type UpdateTeamCommandInput = UpdateTeamRequest &
  UpdateTeamCommandParams;
export type UpdateTeamCommandBody = UpdateTeamRequest;
export type UpdateTeamNameCommandParams = {
  teamId: string;
};
export type UpdateTeamNameCommandInput = UpdateTeamNameRequest &
  UpdateTeamNameCommandParams;
export type UpdateTeamNameCommandBody = UpdateTeamNameRequest;
export type ListTeamMembersCommandParams = {
  teamId: string;
};
export type ListTeamMembersCommandInput = ListTeamMembersCommandParams;
export type ListTeamMembersCommandBody = never;
export type ListTeamInvitationsCommandParams = {
  teamId: string;
};
export type ListTeamInvitationsCommandInput = ListTeamInvitationsCommandParams;
export type ListTeamInvitationsCommandBody = never;
export type CreateTeamInvitationCommandParams = {
  teamId: string;
};
export type CreateTeamInvitationCommandInput = CreateTeamInvitationRequest &
  CreateTeamInvitationCommandParams;
export type CreateTeamInvitationCommandBody = CreateTeamInvitationRequest;
export type DeleteTeamInvitationCommandParams = {
  teamId: string;
  invitationId: string;
};
export type DeleteTeamInvitationCommandInput =
  DeleteTeamInvitationCommandParams;
export type DeleteTeamInvitationCommandBody = never;
export type AcceptTeamInvitationCommandParams = {
  teamId: string;
  invitationId: string;
};
export type AcceptTeamInvitationCommandInput = AcceptTeamInvitationRequest &
  AcceptTeamInvitationCommandParams;
export type AcceptTeamInvitationCommandBody = AcceptTeamInvitationRequest;
export type ListInboxesCommandParams = {
  teamId: string;
};
export type ListInboxesCommandInput = ListInboxesCommandParams;
export type ListInboxesCommandBody = never;
export type CreateInboxCommandParams = {
  teamId: string;
};
export type CreateInboxCommandInput = CreateEmailInboxRequest &
  CreateInboxCommandParams;
export type CreateInboxCommandBody = CreateEmailInboxRequest;
export type GetInboxCommandParams = {
  teamId: string;
  inboxId: string;
};
export type GetInboxCommandInput = GetInboxCommandParams;
export type GetInboxCommandBody = never;
export type UpdateInboxCommandParams = {
  teamId: string;
  inboxId: string;
};
export type UpdateInboxCommandInput = UpdateInboxRequest &
  UpdateInboxCommandParams;
export type UpdateInboxCommandBody = UpdateInboxRequest;
export type ListKeysCommandParams = {
  teamId: string;
};
export type ListKeysCommandInput = ListKeysCommandParams;
export type ListKeysCommandBody = never;
export type CreateKeyCommandParams = {
  teamId: string;
};
export type CreateKeyCommandInput = CreateKeyRequest & CreateKeyCommandParams;
export type CreateKeyCommandBody = CreateKeyRequest;
export type GetKeyCommandParams = {
  teamId: string;
  keyId: string;
};
export type GetKeyCommandInput = GetKeyCommandParams;
export type GetKeyCommandBody = never;
export type UpdateKeyCommandParams = {
  teamId: string;
  keyId: string;
};
export type UpdateKeyCommandInput = UpdateKeyRequest & UpdateKeyCommandParams;
export type UpdateKeyCommandBody = UpdateKeyRequest;
export type CreateEventSourceCommandParams = {
  teamId: string;
};
export type CreateEventSourceCommandInput = CreateEventSourceRequest &
  CreateEventSourceCommandParams;
export type CreateEventSourceCommandBody = CreateEventSourceRequest;
export type ListEventSourcesCommandParams = {
  teamId: string;
};
export type ListEventSourcesCommandInput = ListEventSourcesCommandParams;
export type ListEventSourcesCommandBody = never;
export type GetEventSourceCommandParams = {
  teamId: string;
  eventSourceId: string;
};
export type GetEventSourceCommandInput = GetEventSourceCommandParams;
export type GetEventSourceCommandBody = never;
export type UpdateEventSourceCommandParams = {
  teamId: string;
  eventSourceId: string;
};
export type UpdateEventSourceCommandInput = UpdateEventSourceRequest &
  UpdateEventSourceCommandParams;
export type UpdateEventSourceCommandBody = UpdateEventSourceRequest;
export type DeleteEventSourceCommandParams = {
  teamId: string;
  eventSourceId: string;
};
export type DeleteEventSourceCommandInput = DeleteEventSourceCommandParams;
export type DeleteEventSourceCommandBody = never;
export type ListQuotasCommandParams = {
  teamId: string;
};
export type ListQuotasCommandInput = ListQuotasCommandParams;
export type ListQuotasCommandBody = never;
export type UseQuotaCommandParams = {
  teamId: string;
  sku: string;
};
export type UseQuotaCommandInput = UseQuotaRequest & UseQuotaCommandParams;
export type UseQuotaCommandBody = UseQuotaRequest;
export type GetPaymentDetailsCommandParams = {
  teamId: string;
};
export type GetPaymentDetailsCommandInput = GetPaymentDetailsRequest &
  GetPaymentDetailsCommandParams;
export type GetPaymentDetailsCommandBody = GetPaymentDetailsRequest;
export type GetUserSettingsCommandParams = {
  userId: string;
};
export type GetUserSettingsCommandInput = GetUserSettingsCommandParams;
export type GetUserSettingsCommandBody = never;
export type UpdateUserSettingsCommandParams = {
  userId: string;
};
export type UpdateUserSettingsCommandInput = UpdateUserSettingsRequest &
  UpdateUserSettingsCommandParams;
export type UpdateUserSettingsCommandBody = UpdateUserSettingsRequest;
export type ListDomainInboxesCommandParams = {
  domainName: string;
};
export type ListDomainInboxesCommandInput = ListDomainInboxesCommandParams;
export type ListDomainInboxesCommandBody = never;
export type GetDomainInboxCommandParams = {
  domainName: string;
  handle: string;
};
export type GetDomainInboxCommandInput = GetDomainInboxCommandParams;
export type GetDomainInboxCommandBody = never;
export type GetNumberInboxCommandParams = {
  handle: string;
};
export type GetNumberInboxCommandInput = GetNumberInboxCommandParams;
export type GetNumberInboxCommandBody = never;
export type GetInboxEventSourceCommandParams = {
  teamId: string;
  inboxId: string;
};
export type GetInboxEventSourceCommandInput = GetInboxEventSourceCommandParams;
export type GetInboxEventSourceCommandBody = never;
export type CreateMessageCommandParams = {
  teamId: string;
  inboxId: string;
};
export type CreateMessageCommandInput = CreateMessageRequest &
  CreateMessageCommandParams;
export type CreateMessageCommandBody = CreateMessageRequest;
export type ListMessagesCommandParams = {
  teamId: string;
  inboxId: string;
};
export type ListMessagesCommandInput = ListMessagesCommandParams;
export type ListMessagesCommandBody = never;
export type GetMessageCommandParams = {
  teamId: string;
  inboxId: string;
  messageId: string;
};
export type GetMessageCommandInput = GetMessageCommandParams;
export type GetMessageCommandBody = never;
export type DeleteMessageCommandParams = {
  teamId: string;
  inboxId: string;
  messageId: string;
};
export type DeleteMessageCommandInput = DeleteMessageCommandParams;
export type DeleteMessageCommandBody = never;
export type ListMemberTeamsCommandParams = {
  userId: string;
};
export type ListMemberTeamsCommandInput = ListMemberTeamsCommandParams;
export type ListMemberTeamsCommandBody = never;
export type GetMemberTeamCommandParams = {
  userId: string;
  teamId: string;
};
export type GetMemberTeamCommandInput = GetMemberTeamCommandParams;
export type GetMemberTeamCommandBody = never;
export type CreateTokenCommandParams = {
  userId: string;
};
export type CreateTokenCommandInput = CreateTokenRequest &
  CreateTokenCommandParams;
export type CreateTokenCommandBody = CreateTokenRequest;
export type ListTokensCommandParams = {
  userId: string;
};
export type ListTokensCommandInput = ListTokensCommandParams;
export type ListTokensCommandBody = never;
export type DeleteTokenCommandParams = {
  userId: string;
  tokenId: string;
};
export type DeleteTokenCommandInput = DeleteTokenCommandParams;
export type DeleteTokenCommandBody = never;
export type GetTokenCommandParams = {
  userId: string;
  tokenId: string;
};
export type GetTokenCommandInput = GetTokenCommandParams;
export type GetTokenCommandBody = never;
export type UpdateTokenCommandParams = {
  userId: string;
  tokenId: string;
};
export type UpdateTokenCommandInput = UpdateTokenRequest &
  UpdateTokenCommandParams;
export type UpdateTokenCommandBody = UpdateTokenRequest;
